# -*- coding: utf-8 -*-
"""Diabetes Disease

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VbK5W_0Kovz9WntRPOL4yOU6nBzH399x
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/sample_data/Diabetes_Classification.csv')

diabetes_dataset.head()

"""# New Section"""

diabetes_dataset.shape

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns = ['Outcome','Patient number'], axis=1)
X['Gender'] = X['Gender'].apply(lambda x: 1 if x == 'male' else 0)
Y = diabetes_dataset['Outcome']

print(X)

cols = X.columns

cols

print(Y)

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']
Y = Y.apply(lambda x: 0 if x == "No diabetes" else 1)

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the testing data : ', test_data_accuracy)



input_data = pd.DataFrame([(136,81,51,2.7,22,0,66,160,25.8,105,85,35,40,0.88)],columns=cols)

# standardize the input data
std_data = scaler.transform(input_data)

predictions = classifier.predict(std_data)

for prediction in predictions:
  if (prediction == 0):
    print('The person is not diabetic')
  else:
    print('The person is diabetic')

import pickle

filename = 'diabetes_model.sav'
filename_scaler = 'diabetes_model_scaler.sav'

pickle.dump(scaler,open(filename_scaler,"wb"))

pickle.dump(classifier, open(filename, 'wb'))

loaded_model = pickle.load(open('diabetes_model.sav', 'rb'))